<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 2021

## Libraries

```elixir
Mix.install([
  {:vega_lite, "~> 0.1.2"},
  {:kino, "~> 0.3.1"}
])
```

```output
:ok
```

## Utils

```elixir
alias VegaLite, as: Vl

defmodule Utils do
  def read_textarea(name, lines \\ "") do
    line = IO.gets(name)

    case line do
      :eof -> lines
      {:error, _} -> lines
      _ -> read_textarea(name, lines <> line)
    end
  end
end
```

```output
{:module, Utils, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:read_textarea, 2}}
```

## Day 1 : Sonar Sweep

You're minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean!

Before you know it, you're inside a submarine the Elves keep ready for situations like this. It's covered in Christmas lights (because of course it is), and it even has an experimental antenna that should be able to track the keys if you can boost its signal strength high enough; there's a little meter that indicates the antenna's signal strength by displaying 0-50 stars.

Your instincts tell you that in order to save Christmas, you'll need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

As the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.

For example, suppose you had the following report:

```
199
200
208
210
200
207
240
269
260
263
```

This report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.

The first order of business is to figure out how quickly the depth increases, just so you know what you're dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.

To do this, count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:

```
199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)
```

In this example, there are 7 measurements that are larger than the previous measurement.

*How many measurements are larger than the previous measurement?*

<!-- livebook:{"livebook_object":"cell_input","name":"Day 1 Input","type":"textarea","value":"104\n105\n109\n120\n124\n113\n120\n121\n122\n123\n134\n133\n134\n150\n160\n165\n179\n178\n180\n178\n196\n197\n198\n204\n197\n213\n206\n207\n209\n210\n211\n223\n212\n224\n228\n238\n237\n238\n242\n245\n249\n250\n253\n248\n261\n265\n274\n276\n274\n275\n278\n275\n276\n267\n266\n272\n275\n279\n280\n286\n282\n292\n308\n323\n324\n319\n310\n304\n309\n310\n320\n326\n322\n340\n341\n340\n339\n344\n346\n342\n353\n352\n353\n349\n346\n330\n342\n343\n344\n329\n348\n346\n367\n373\n379\n384\n388\n398\n387\n392\n391\n385\n409\n411\n416\n419\n420\n423\n422\n420\n421\n422\n421\n422\n441\n438\n428\n431\n443\n427\n433\n434\n432\n421\n429\n432\n434\n439\n437\n445\n456\n462\n464\n472\n474\n460\n433\n439\n433\n444\n456\n457\n452\n454\n455\n465\n474\n475\n486\n489\n490\n491\n472\n477\n475\n493\n497\n495\n496\n488\n500\n501\n504\n505\n524\n525\n522\n530\n548\n545\n562\n570\n582\n583\n584\n586\n585\n604\n606\n610\n617\n619\n621\n623\n620\n622\n624\n625\n633\n627\n623\n638\n639\n644\n643\n644\n648\n663\n695\n681\n682\n686\n692\n708\n712\n720\n736\n737\n738\n739\n738\n741\n742\n741\n746\n748\n751\n750\n782\n788\n793\n799\n790\n834\n852\n860\n848\n856\n857\n859\n860\n863\n849\n844\n854\n860\n862\n865\n864\n866\n887\n878\n899\n893\n895\n896\n897\n876\n877\n886\n887\n898\n905\n906\n907\n875\n877\n875\n894\n893\n871\n878\n879\n872\n868\n873\n884\n900\n899\n886\n896\n903\n909\n928\n932\n935\n928\n913\n917\n919\n920\n912\n917\n923\n926\n927\n932\n936\n944\n942\n961\n960\n961\n956\n951\n971\n980\n990\n999\n1005\n1008\n1010\n1011\n1032\n1034\n1041\n1066\n1067\n1064\n1066\n1070\n1068\n1079\n1100\n1122\n1118\n1111\n1113\n1141\n1145\n1170\n1171\n1170\n1167\n1170\n1171\n1178\n1183\n1186\n1189\n1190\n1198\n1200\n1202\n1204\n1207\n1226\n1243\n1245\n1246\n1247\n1273\n1267\n1274\n1276\n1298\n1293\n1313\n1315\n1298\n1301\n1316\n1322\n1282\n1256\n1257\n1263\n1271\n1294\n1313\n1322\n1323\n1322\n1324\n1309\n1320\n1325\n1321\n1327\n1335\n1334\n1335\n1346\n1382\n1388\n1393\n1395\n1403\n1417\n1424\n1426\n1427\n1428\n1429\n1432\n1431\n1430\n1411\n1439\n1440\n1441\n1458\n1461\n1466\n1471\n1481\n1483\n1486\n1488\n1494\n1490\n1492\n1489\n1533\n1560\n1577\n1582\n1583\n1592\n1594\n1593\n1594\n1599\n1605\n1616\n1619\n1621\n1627\n1651\n1655\n1656\n1655\n1653\n1651\n1652\n1653\n1657\n1658\n1660\n1674\n1680\n1694\n1700\n1698\n1676\n1648\n1644\n1643\n1645\n1652\n1653\n1654\n1660\n1663\n1664\n1668\n1671\n1681\n1687\n1699\n1702\n1705\n1707\n1712\n1739\n1750\n1753\n1755\n1779\n1769\n1792\n1793\n1798\n1828\n1832\n1811\n1844\n1845\n1846\n1848\n1854\n1857\n1859\n1863\n1866\n1862\n1894\n1898\n1875\n1878\n1879\n1884\n1897\n1883\n1894\n1889\n1890\n1889\n1907\n1924\n1926\n1936\n1940\n1949\n1950\n1968\n1973\n1974\n1971\n1982\n1989\n2004\n2005\n2007\n2018\n2032\n2037\n2039\n2040\n2042\n2046\n2056\n2053\n2054\n2057\n2059\n2063\n2067\n2065\n2059\n2049\n2052\n2045\n2053\n2057\n2063\n2066\n2061\n2068\n2063\n2058\n2060\n2061\n2066\n2065\n2093\n2094\n2126\n2135\n2136\n2119\n2121\n2134\n2135\n2137\n2138\n2143\n2144\n2152\n2159\n2154\n2159\n2162\n2164\n2158\n2163\n2162\n2159\n2165\n2166\n2167\n2165\n2169\n2172\n2182\n2188\n2173\n2182\n2175\n2182\n2203\n2205\n2206\n2212\n2213\n2218\n2229\n2226\n2233\n2235\n2233\n2257\n2258\n2284\n2280\n2282\n2285\n2279\n2280\n2291\n2292\n2293\n2294\n2291\n2292\n2293\n2300\n2308\n2303\n2308\n2312\n2311\n2320\n2315\n2326\n2328\n2330\n2352\n2349\n2352\n2357\n2346\n2360\n2375\n2374\n2375\n2377\n2385\n2392\n2383\n2386\n2388\n2403\n2411\n2400\n2401\n2402\n2399\n2400\n2401\n2397\n2417\n2419\n2431\n2430\n2429\n2421\n2429\n2427\n2428\n2429\n2424\n2425\n2426\n2432\n2433\n2435\n2436\n2441\n2454\n2455\n2456\n2464\n2462\n2463\n2465\n2475\n2489\n2495\n2497\n2467\n2484\n2486\n2487\n2502\n2509\n2504\n2503\n2496\n2515\n2516\n2542\n2550\n2552\n2554\n2557\n2559\n2565\n2563\n2552\n2553\n2555\n2552\n2559\n2564\n2565\n2548\n2546\n2536\n2540\n2542\n2543\n2544\n2561\n2550\n2551\n2552\n2556\n2562\n2559\n2596\n2583\n2586\n2584\n2585\n2590\n2592\n2590\n2591\n2599\n2615\n2617\n2595\n2599\n2607\n2605\n2600\n2612\n2611\n2591\n2611\n2590\n2599\n2597\n2604\n2612\n2613\n2620\n2603\n2592\n2604\n2606\n2588\n2591\n2577\n2576\n2606\n2605\n2614\n2618\n2622\n2633\n2636\n2648\n2649\n2638\n2637\n2644\n2651\n2650\n2651\n2658\n2657\n2659\n2661\n2660\n2658\n2669\n2676\n2688\n2691\n2693\n2697\n2698\n2702\n2699\n2706\n2707\n2710\n2698\n2697\n2705\n2717\n2718\n2720\n2721\n2731\n2749\n2757\n2765\n2767\n2759\n2776\n2780\n2784\n2778\n2779\n2783\n2788\n2789\n2825\n2826\n2820\n2825\n2852\n2871\n2870\n2872\n2873\n2878\n2882\n2900\n2906\n2908\n2907\n2917\n2931\n2933\n2931\n2952\n2953\n2954\n2962\n2971\n2973\n2960\n2965\n2967\n2968\n2982\n2983\n2994\n2997\n3014\n3026\n3028\n3040\n3057\n3063\n3064\n3065\n3066\n3073\n3056\n3052\n3067\n3070\n3071\n3072\n3073\n3077\n3078\n3074\n3083\n3082\n3079\n3080\n3081\n3073\n3069\n3072\n3081\n3111\n3109\n3112\n3126\n3127\n3128\n3129\n3135\n3146\n3147\n3149\n3142\n3148\n3152\n3165\n3173\n3201\n3216\n3217\n3218\n3217\n3235\n3236\n3241\n3247\n3248\n3249\n3251\n3252\n3251\n3250\n3252\n3260\n3261\n3259\n3255\n3256\n3257\n3258\n3259\n3264\n3299\n3300\n3304\n3313\n3326\n3324\n3326\n3331\n3340\n3341\n3343\n3348\n3342\n3380\n3381\n3370\n3374\n3390\n3379\n3382\n3383\n3386\n3388\n3382\n3386\n3402\n3400\n3406\n3408\n3407\n3409\n3411\n3412\n3411\n3412\n3422\n3441\n3446\n3451\n3449\n3451\n3480\n3500\n3511\n3520\n3521\n3525\n3548\n3557\n3558\n3560\n3561\n3562\n3570\n3571\n3575\n3571\n3570\n3574\n3576\n3583\n3587\n3594\n3615\n3619\n3620\n3622\n3607\n3599\n3602\n3604\n3607\n3617\n3618\n3623\n3626\n3632\n3637\n3635\n3640\n3641\n3642\n3654\n3668\n3669\n3675\n3670\n3672\n3675\n3684\n3688\n3701\n3699\n3705\n3704\n3718\n3724\n3717\n3734\n3736\n3741\n3729\n3730\n3731\n3722\n3717\n3718\n3711\n3708\n3719\n3737\n3738\n3734\n3740\n3747\n3749\n3740\n3752\n3758\n3784\n3787\n3792\n3800\n3802\n3803\n3805\n3814\n3815\n3813\n3816\n3812\n3815\n3816\n3803\n3799\n3805\n3806\n3809\n3788\n3781\n3783\n3779\n3780\n3786\n3776\n3780\n3790\n3802\n3806\n3789\n3790\n3791\n3804\n3801\n3797\n3823\n3826\n3828\n3831\n3834\n3843\n3867\n3870\n3879\n3883\n3893\n3909\n3934\n3932\n3955\n3961\n3963\n3968\n3994\n4001\n4002\n3999\n4008\n4003\n4006\n3997\n3990\n4020\n4021\n4027\n4031\n4038\n4039\n4043\n4040\n4036\n4049\n4050\n4075\n4077\n4079\n4061\n4060\n4062\n4059\n4050\n4052\n4053\n4094\n4097\n4106\n4107\n4108\n4112\n4118\n4122\n4125\n4124\n4126\n4127\n4129\n4130\n4131\n4139\n4163\n4164\n4169\n4168\n4176\n4177\n4175\n4177\n4183\n4186\n4188\n4194\n4173\n4163\n4168\n4198\n4201\n4202\n4205\n4177\n4178\n4181\n4180\n4211\n4214\n4215\n4218\n4219\n4218\n4215\n4220\n4230\n4231\n4232\n4276\n4281\n4288\n4289\n4291\n4293\n4297\n4304\n4319\n4330\n4337\n4343\n4353\n4360\n4361\n4377\n4402\n4401\n4424\n4429\n4445\n4452\n4456\n4460\n4457\n4434\n4436\n4438\n4441\n4442\n4437\n4439\n4446\n4447\n4457\n4456\n4454\n4455\n4456\n4461\n4473\n4471\n4473\n4481\n4495\n4498\n4504\n4511\n4520\n4541\n4540\n4561\n4572\n4577\n4578\n4577\n4572\n4575\n4582\n4608\n4617\n4623\n4625\n4635\n4640\n4673\n4675\n4676\n4692\n4687\n4688\n4692\n4703\n4685\n4674\n4693\n4708\n4703\n4693\n4681\n4682\n4696\n4722\n4729\n4732\n4739\n4740\n4744\n4750\n4751\n4752\n4751\n4744\n4746\n4749\n4754\n4758\n4748\n4749\n4760\n4759\n4761\n4757\n4767\n4779\n4771\n4772\n4774\n4773\n4791\n4792\n4790\n4797\n4790\n4800\n4810\n4836\n4830\n4826\n4828\n4838\n4836\n4840\n4846\n4848\n4863\n4865\n4867\n4880\n4883\n4892\n4908\n4905\n4909\n4890\n4891\n4882\n4889\n4898\n4900\n4903\n4909\n4913\n4919\n4920\n4922\n4915\n4922\n4923\n4944\n4960\n4978\n4979\n4983\n5006\n5009\n5012\n5011\n5023\n5045\n5010\n5026\n5027\n5030\n5049\n5055\n5053\n5068\n5069\n5077\n5083\n5084\n5087\n5094\n5093\n5101\n5108\n5110\n5111\n5116\n5118\n5121\n5153\n5155\n5156\n5157\n5150\n5171\n5172\n5180\n5191\n5185\n5194\n5218\n5221\n5216\n5224\n5225\n5226\n5225\n5231\n5227\n5228\n5223\n5247\n5245\n5246\n5260\n5287\n5281\n5285\n5287\n5291\n5302\n5303\n5304\n5302\n5310\n5321\n5317\n5326\n5327\n5329\n5307\n5310\n5313\n5336\n5358\n5367\n5369\n5375\n5379\n5368\n5370\n5371\n5372\n5377\n5383\n5384\n5389\n5402\n5404\n5397\n5400\n5402\n5403\n5396\n5400\n5391\n5394\n5400\n5386\n5382\n5389\n5385\n5386\n5388\n5390\n5391\n5397\n5401\n5403\n5405\n5409\n5412\n5431\n5435\n5440\n5457\n5454\n5422\n5423\n5424\n5423\n5426\n5417\n5420\n5424\n5422\n5447\n5446\n5455\n5460\n5472\n5475\n5482\n5483\n5485\n5493\n5494\n5500\n5512\n5519\n5539\n5550\n5554\n5561\n5571\n5597\n5598\n5579\n5584\n5589\n5591\n5592\n5593\n5594\n5616\n5618\n5628\n5630\n5617\n5625\n5626\n5655\n5654\n5663\n5673\n5670\n5669\n5661\n5660\n5665\n5669\n5667\n5675\n5677\n5679\n5680\n5703\n5709\n5710\n5708\n5710\n5711\n5713\n5714\n5715\n5709\n5738\n5714\n5718\n5734\n5735\n5743\n5738\n5739\n5740\n5749\n5752\n5768\n5757\n5753\n5752\n5753\n5754\n5755\n5758\n5770\n5769\n5768\n5781\n5789\n5798\n5799\n5814\n5815\n5824\n5828\n5829\n5830\n5831\n5837\n5835\n5836\n5832\n5820\n5821\n5822\n5814\n5817\n5818\n5821\n5818\n5811\n5814\n5842\n5844\n5863\n5874\n5870\n5883\n5878\n5890\n5891\n5900\n5896\n5895\n5863\n5860\n5861\n5859\n5861\n5865\n5862\n5864\n5870\n5890\n5884\n5889\n5893\n5898\n5902\n5922\n5924\n5926\n5907\n5909\n5915\n5914\n5923\n5925\n5930\n5932\n5934\n5946\n5947\n5950\n5945\n5957\n5965\n5966\n5971\n5967\n5973\n5974\n5977\n5979\n5984\n5991\n5992\n5994\n6002\n6005\n6006\n6011\n6012\n6014\n6000\n6019\n6034\n6053\n6035\n6036\n6042\n6047\n6048\n6050\n6054\n6074\n6075\n6077\n6046\n6055\n6058\n6060\n6061\n6062\n6073\n6081\n6086\n6088\n6096\n6097\n6098\n6099\n6096\n6110\n6112\n6113\n6112\n6111\n6132\n6115\n6118\n6127\n6124\n6128\n6139\n6145\n6156\n6155\n6153\n6152\n6153\n6157\n6164\n6176\n6186\n6187\n6188\n6190\n6192\n6185\n6190\n6191\n6192\n6191\n6198\n6200\n6213\n6214\n6222\n6242\n6236\n6246\n6256\n6257\n6256\n6257\n6258\n6259\n6284\n6285\n6286\n6290\n6291\n6287\n6294\n6298\n6311\n6301\n6309\n6312\n6315\n6318\n6323\n6325\n6334\n6323\n6322\n6323\n6334\n6335\n6332\n6343\n6344\n6348\n6352\n6358\n6361\n6362\n6367\n6381\n6395\n6412\n6411\n6410\n6426\n6444\n6455\n6461\n6470\n6449\n6456\n6455\n6464\n6463\n6468\n6474\n6478\n6477\n6474\n6473\n6468\n6474\n6476\n6501\n6513\n6516\n6517\n6518\n6513\n6515\n6519\n6515\n6531\n6537\n6538\n6531\n6545\n6553\n6554\n6560\n6559\n6562\n6551\n6563\n6559\n6557\n6562\n6564\n6562\n6564\n6563\n6568\n6572\n6573\n6572\n6583\n6591\n6595\n6587\n6589\n6590\n6581\n6583\n6593\n6592\n6616\n6627\n6654\n6657\n6667\n6668\n6680\n6695\n6682\n6685\n6691\n6708\n6720\n6722\n6723\n6721\n6750\n6759\n6760\n6759\n6760\n6769\n6772\n6780\n6774\n6782\n6774\n6777\n6778\n6777\n6786\n6787\n6792\n6796\n6802\n6814\n6816\n6813\n6814\n6823\n6807\n6805\n6804\n6805\n6806\n6807\n6801\n6803\n6806\n6807\n6799\n6812\n6832\n6858\n6846\n6856\n6857\n6865\n6867\n6876\n6877\n6887\n6889\n6895\n6896\n6900\n6901\n6881\n6874\n6873\n6876\n6883\n6888\n6898\n6899\n6910\n6913\n6934\n6932\n6939\n6940\n6943\n6968\n6974\n6978\n6975\n6956\n6971\n6953\n6976\n6983\n6980\n6986\n6987\n6988\n6989\n6992\n7003\n7004\n7005\n7004\n7011\n7017\n7019\n7030\n7033\n7037\n7043\n7053\n7058\n7062\n7076\n7078\n7080\n7093\n7094\n7095\n7107\n7106\n7109\n7110\n7111\n7112\n7113\n7116\n7117\n7119\n7118\n7119\n7120\n7122\n7134\n7145\n7142\n7174\n7175\n7185\n7189\n7190\n7191\n7214\n7228\n7236\n7252\n7267\n7296\n7302\n7303\n7322\n7321\n7323\n7327\n7331\n7333\n7337\n7334\n7343\n7344\n7352\n7361\n7369\n7381\n7384\n7385\n7384\n7389\n7393\n7394\n7395\n7403\n7425\n7430\n7431\n7433\n7441\n7440\n7424\n7427\n7419\n7430\n7432\n7436\n7437\n7450\n7451\n7457\n7477\n7485\n7490\n7496\n7503\n7504\n7508\n7509\n7485\n7490\n7501\n7502\n7506\n7512\n7513\n7514\n7515\n7513\n7528\n7545\n7554\n7563\n7569\n7570\n7573\n7574\n7586\n7589\n7605\n7618\n7620\n7621\n7624\n7645\n7658\n7669\n7672\n7670\n7671\n7678\n7680\n7692\n7712\n7724\n7730\n7736\n7737\n7746\n7759"} -->

### Following solution is naive and performs at O(1.5n)

```elixir
day_1_input =
  Utils.read_textarea("Day 1 Input")
  |> String.split("\n", trim: true)
  |> Enum.map(&String.to_integer/1)

pairs_of_depths = Enum.chunk_every(day_1_input, 2, 1, :discard)

Enum.reduce(pairs_of_depths, 0, fn [depth1, depth2], acc ->
  cond do
    depth1 < depth2 -> acc + 1
    true -> acc
  end
end)
```

```output
1557
```

Considering every single measurement isn't as useful as you expected: there's just too much noise in the data.

Instead, consider sums of a three-measurement sliding window. Again considering the above example:

```
199  A      
200  A B    
208  A B C  
210    B C D
200  E   C D
207  E F   D
240  E F G  
269    F G H
260      G H
263        H
```

Start by comparing the first and second three-measurement windows. The measurements in the first window are marked A (199, 200, 208); their sum is 199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its sum is 618. The sum of measurements in the second window is larger than the sum of the first, so this first comparison increased.

Your goal now is to count the number of times the sum of measurements in this sliding window increases from the previous sum. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren't enough measurements left to create a new three-measurement sum.

In the above example, the sum of each three-measurement window is as follows:

```
A: 607 (N/A - no previous sum)
B: 618 (increased)
C: 618 (no change)
D: 617 (decreased)
E: 647 (increased)
F: 716 (increased)
G: 769 (increased)
H: 792 (increased)
```

In this example, there are 5 sums that are larger than the previous sum.

*Consider sums of a three-measurement sliding window. How many sums are larger than the previous sum?*

<!-- livebook:{"break_markdown":true} -->

### The following solution is naive and performs at O(~5n)

```elixir
triplets_of_depths = Enum.chunk_every(day_1_input, 3, 1, :discard)

Enum.reduce(triplets_of_depths, {0, nil, 0}, fn depths, {total, prev_sum, n} ->
  next_sum = Enum.sum(depths)

  cond do
    prev_sum == nil -> {total, next_sum, n + 1 + length(depths)}
    prev_sum < next_sum -> {total + 1, next_sum, n + 1 + length(depths)}
    true -> {total, next_sum, n + 1 + length(depths)}
  end
end)
|> elem(0)
```

```output
1608
```

### Optimized solutions both performing at O(n - step_size)

```elixir
part_one_step_size = 1
part_one_range = Range.new(0, length(day_1_input) - part_one_step_size)

part_one_answer =
  for i <- part_one_range, reduce: 0 do
    acc ->
      first = Enum.at(day_1_input, i)
      second = Enum.at(day_1_input, i + part_one_step_size)

      cond do
        second == nil -> acc
        first < second -> acc + 1
        true -> acc
      end
  end

IO.puts("Part One Answer: #{part_one_answer}")

part_two_step_size = 3
part_two_range = Range.new(0, length(day_1_input) - part_two_step_size)

part_two_answer =
  for i <- part_two_range, reduce: 0 do
    acc ->
      first = Enum.at(day_1_input, i)
      second = Enum.at(day_1_input, i + part_two_step_size)

      cond do
        second == nil -> acc
        first < second -> acc + 1
        true -> acc
      end
  end

IO.puts("Part Two Answer: #{part_two_answer}")
```

```output
Part One Answer: 1557
Part Two Answer: 1608
```

```output
:ok
```

## Day 2: Dive!

Now, you need to figure out how to pilot this thing.

It seems like the submarine can take a series of commands like forward 1, down 2, or up 3:

forward X increases the horizontal position by X units.
down X increases the depth by X units.
up X decreases the depth by X units.
Note that since you're on a submarine, down and up affect your depth, and so they have the opposite result of what you might expect.

The submarine seems to already have a planned course (your puzzle input). You should probably figure out where it's going. For example:

```
forward 5
down 5
forward 8
up 3
down 8
forward 2
```

Your horizontal position and depth both start at 0. The steps above would then modify them as follows:

`forward 5` adds 5 to your horizontal position, a total of 5.

`down 5` adds 5 to your depth, resulting in a value of 5.

`forward 8` adds 8 to your horizontal position, a total of 13.

`up 3` decreases your depth by 3, resulting in a value of 2.

`down 8` adds 8 to your depth, resulting in a value of 10.

`forward 2` adds 2 to your horizontal position, a total of 15.

After following these instructions, you would have a horizontal position of 15 and a depth of 10. (Multiplying these together produces 150.)

*Calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?*

<!-- livebook:{"livebook_object":"cell_input","name":"Day 2 Input","type":"textarea","value":"forward 2\nforward 3\nforward 5\nforward 6\ndown 7\nforward 8\nforward 4\nforward 7\nforward 5\nforward 5\ndown 4\ndown 9\nforward 8\nforward 5\nup 5\ndown 5\nforward 3\ndown 4\ndown 8\nforward 9\ndown 1\nup 9\ndown 7\nup 7\nup 1\nforward 1\ndown 1\ndown 4\ndown 4\ndown 8\ndown 4\nup 3\ndown 1\ndown 3\nforward 7\ndown 6\nforward 3\nforward 5\nforward 2\nup 9\nforward 7\nup 5\ndown 3\nforward 1\nforward 2\ndown 3\ndown 8\ndown 3\nforward 8\nup 5\ndown 5\nforward 3\ndown 5\nforward 9\ndown 3\ndown 4\ndown 9\ndown 7\nup 3\ndown 9\nup 9\nup 1\nforward 3\nup 4\ndown 3\nforward 7\nforward 7\nup 7\nforward 6\ndown 7\ndown 6\nforward 2\nforward 9\ndown 5\nforward 4\nup 6\ndown 1\ndown 9\ndown 9\nforward 4\ndown 1\nforward 6\ndown 1\ndown 5\ndown 4\ndown 4\nforward 4\nforward 9\nup 1\ndown 2\ndown 8\ndown 5\ndown 8\ndown 8\nup 2\nforward 8\nup 1\nforward 4\ndown 5\ndown 1\nup 2\nforward 6\nforward 9\nforward 2\nforward 6\nforward 9\nup 6\nforward 9\nup 4\ndown 7\nup 6\nforward 2\ndown 1\nup 3\nforward 1\nforward 8\ndown 6\ndown 8\ndown 8\nforward 8\nforward 2\nforward 2\ndown 2\nup 1\ndown 9\nup 9\ndown 9\nup 3\nforward 9\nup 4\nup 7\nup 6\ndown 9\nforward 1\ndown 3\ndown 4\nforward 8\ndown 3\ndown 9\nup 3\nforward 2\nup 5\ndown 3\nforward 8\nup 3\ndown 3\nforward 2\nforward 9\ndown 1\ndown 9\ndown 4\nup 7\ndown 4\nup 6\nforward 5\ndown 6\nforward 3\ndown 2\nforward 1\nforward 8\ndown 4\nforward 1\nup 7\nforward 6\nup 9\nforward 6\ndown 3\nforward 2\ndown 4\nforward 6\ndown 3\ndown 6\ndown 1\ndown 1\ndown 5\nforward 3\nforward 9\nforward 8\ndown 3\nforward 7\nup 9\nforward 9\nup 2\nforward 4\nup 3\nforward 1\nup 6\nup 8\ndown 5\ndown 6\nup 9\ndown 6\ndown 9\nup 9\ndown 4\nforward 5\nup 2\ndown 3\nup 3\ndown 1\nforward 3\ndown 5\nforward 7\ndown 6\ndown 7\ndown 5\nforward 2\nup 6\ndown 9\ndown 4\ndown 3\nforward 9\nup 8\nforward 2\ndown 2\nforward 4\nup 6\ndown 4\nup 8\ndown 7\ndown 2\nup 6\nup 4\ndown 2\nforward 5\nup 4\ndown 8\nforward 3\nforward 1\ndown 7\nforward 8\nforward 7\ndown 7\nup 4\nforward 8\ndown 5\nup 9\nforward 1\nforward 4\nforward 9\nforward 7\ndown 9\nup 9\ndown 1\ndown 7\nforward 7\ndown 7\ndown 7\ndown 3\ndown 5\nforward 3\ndown 2\nforward 6\ndown 9\nup 5\nup 3\nforward 5\ndown 6\ndown 1\nforward 4\ndown 3\nforward 8\ndown 7\nforward 7\nforward 7\nup 7\nup 2\nup 3\nforward 9\ndown 5\nup 2\nforward 5\nup 5\nforward 2\nforward 2\ndown 8\nforward 2\nup 4\nforward 1\nforward 3\nup 8\nup 9\nforward 5\ndown 1\nup 8\ndown 4\ndown 8\nup 4\nforward 9\ndown 6\ndown 8\nup 2\nup 3\ndown 7\ndown 4\nforward 5\ndown 6\nforward 3\nforward 3\nforward 8\ndown 1\ndown 7\ndown 9\ndown 2\ndown 7\nforward 7\ndown 7\ndown 6\nup 6\nforward 8\nforward 5\nup 5\ndown 2\nup 8\nup 4\ndown 9\nup 2\nforward 5\nup 2\ndown 4\nup 4\nforward 2\nforward 4\nforward 9\nforward 9\nup 4\nup 5\ndown 1\ndown 6\ndown 1\ndown 4\ndown 5\ndown 3\nforward 3\ndown 9\nforward 6\ndown 3\ndown 9\ndown 2\nup 2\ndown 2\ndown 7\nforward 9\ndown 3\ndown 3\ndown 2\ndown 3\nforward 2\ndown 9\ndown 9\nup 5\nup 3\nforward 4\nup 7\nforward 8\nup 6\nforward 7\ndown 7\ndown 1\nforward 5\ndown 2\nup 1\ndown 8\nup 3\nforward 2\nup 9\ndown 1\ndown 3\ndown 6\ndown 2\ndown 7\nup 2\nforward 5\nforward 7\ndown 2\nforward 5\nforward 4\nforward 5\ndown 3\nforward 7\ndown 7\nforward 8\ndown 3\ndown 2\nup 1\nforward 6\ndown 4\ndown 2\nforward 7\nup 3\ndown 4\nforward 2\nup 6\ndown 3\nup 6\nup 8\ndown 9\nup 6\nforward 8\nforward 9\nforward 4\nforward 7\ndown 2\nforward 9\ndown 7\nup 9\ndown 5\ndown 6\nup 5\ndown 4\nforward 8\nforward 4\nforward 4\ndown 6\nforward 3\nforward 6\ndown 9\ndown 9\nup 2\nforward 7\ndown 8\ndown 9\ndown 9\nforward 7\nforward 3\ndown 7\ndown 8\nforward 8\ndown 6\ndown 5\ndown 9\ndown 3\nforward 1\ndown 5\nforward 2\nforward 8\ndown 2\nforward 6\nforward 3\ndown 7\ndown 4\nforward 8\nforward 1\ndown 6\nforward 9\nforward 6\nup 1\nup 3\ndown 8\nforward 1\nup 5\ndown 4\nforward 7\nup 3\ndown 2\nforward 1\nforward 9\ndown 9\ndown 7\nforward 8\ndown 4\nup 3\ndown 4\nforward 2\nforward 6\ndown 7\nforward 6\ndown 6\ndown 4\ndown 1\nup 9\ndown 4\ndown 7\nup 4\ndown 9\nforward 6\ndown 3\nforward 2\ndown 4\nforward 3\ndown 5\nup 9\nforward 8\nup 7\nup 6\nup 4\nforward 1\ndown 1\nforward 4\nup 6\nforward 5\nforward 4\nforward 5\nup 6\ndown 1\nforward 3\nup 7\ndown 9\nup 9\ndown 5\nforward 6\nforward 4\nup 1\ndown 4\nup 1\nforward 3\nforward 1\ndown 3\nforward 7\ndown 2\nforward 3\nup 2\nforward 8\ndown 3\nup 9\ndown 5\nforward 6\ndown 1\ndown 8\ndown 5\nforward 1\ndown 6\nup 2\nforward 6\ndown 2\ndown 1\nup 6\nup 7\ndown 5\nforward 7\nforward 6\nforward 6\ndown 7\nforward 4\ndown 5\nup 5\ndown 1\nup 8\ndown 8\ndown 2\ndown 2\ndown 9\nup 9\nforward 2\nforward 7\ndown 7\ndown 4\ndown 4\ndown 8\nforward 5\nforward 2\nup 9\ndown 9\nforward 7\nup 9\ndown 2\ndown 7\nup 2\nup 8\nforward 8\ndown 4\nforward 3\nforward 4\nforward 6\nforward 2\ndown 1\ndown 2\nforward 2\nup 1\ndown 1\nforward 5\nup 3\nup 3\ndown 3\ndown 1\ndown 4\nup 5\nup 6\nforward 5\nup 7\nforward 6\ndown 4\ndown 7\nup 8\nforward 1\ndown 5\nup 4\nup 3\nup 5\ndown 1\nup 5\nforward 3\nup 5\nforward 2\nforward 2\nforward 5\nforward 2\nup 9\nforward 4\ndown 1\ndown 3\ndown 5\nup 2\ndown 8\nforward 8\nforward 9\ndown 1\ndown 3\nforward 8\nforward 2\ndown 2\ndown 1\nup 7\nforward 2\nforward 8\ndown 9\nforward 1\nforward 4\ndown 7\ndown 4\nup 7\ndown 3\ndown 1\ndown 4\nup 7\ndown 6\nforward 7\ndown 8\nup 2\nup 4\nup 6\ndown 9\ndown 9\ndown 8\nforward 6\nup 3\nup 1\nforward 9\nforward 6\nup 4\nup 2\nup 7\nforward 5\nup 9\nup 9\nforward 9\nup 6\ndown 1\ndown 3\nforward 3\ndown 2\ndown 2\ndown 6\ndown 9\nforward 3\nforward 7\nup 3\nforward 3\ndown 5\nforward 9\nup 6\ndown 2\nforward 8\ndown 3\nup 5\ndown 6\nforward 9\ndown 5\ndown 2\ndown 6\nforward 8\nforward 6\ndown 1\nforward 6\nup 1\nup 7\ndown 4\ndown 7\nforward 4\nforward 7\ndown 4\nforward 8\ndown 8\ndown 7\nforward 9\ndown 1\ndown 3\ndown 6\nforward 7\nforward 6\nforward 3\nforward 8\ndown 5\ndown 3\nup 1\ndown 9\ndown 8\nforward 3\ndown 6\ndown 1\nforward 5\nforward 5\nforward 9\nup 5\ndown 6\nup 9\ndown 7\ndown 6\nup 1\nforward 5\nforward 7\nforward 8\nforward 7\nforward 6\nforward 3\nforward 1\nforward 2\nup 4\nforward 3\nforward 4\nforward 5\nup 2\nup 3\nforward 4\ndown 9\nup 4\nforward 7\ndown 6\ndown 6\ndown 1\nforward 2\ndown 2\nforward 2\ndown 3\nforward 7\nforward 8\ndown 4\nup 7\nforward 7\ndown 7\nforward 7\nforward 9\ndown 7\nup 2\ndown 3\nforward 7\ndown 1\nforward 8\nforward 2\nup 9\ndown 3\nforward 2\nup 4\nforward 9\ndown 4\ndown 4\nforward 4\ndown 2\ndown 9\nforward 4\ndown 2\ndown 6\nforward 9\nforward 2\nup 1\nforward 2\nforward 3\ndown 5\nup 8\ndown 4\ndown 4\nforward 7\ndown 2\nup 6\ndown 9\nforward 9\nup 1\nforward 3\ndown 5\nforward 3\ndown 3\nforward 4\nup 3\ndown 6\ndown 7\ndown 4\ndown 8\ndown 4\ndown 5\nup 9\nup 1\ndown 7\nup 3\nup 3\ndown 3\nup 4\nup 6\nforward 8\ndown 1\nforward 7\nforward 4\ndown 9\ndown 1\nforward 7\nforward 9\nforward 1\ndown 3\ndown 2\nforward 3\nforward 2\ndown 7\nforward 9\nforward 6\nup 9\ndown 2\nforward 9\nup 6\nforward 8\nup 1\ndown 5\ndown 8\nforward 1\ndown 1\nforward 9\nup 1\nforward 9\nforward 1\nforward 1\ndown 7\nforward 3\nforward 6\ndown 5\nforward 7\nforward 1\ndown 7\ndown 6\ndown 6\nforward 5\nup 6\ndown 6\nforward 8\nup 2\ndown 8\ndown 3\nup 5\nup 8\ndown 6\nforward 4\nforward 2\nup 3\nforward 5\nforward 3\nup 8\nforward 6\nup 8\nforward 1\nup 8\nup 7\nup 6\nforward 2\ndown 9\ndown 9\nforward 3\ndown 7\nforward 3\ndown 6\nforward 9\nup 5\ndown 1\nforward 7\ndown 1\ndown 5\ndown 9\nforward 8\nforward 9\nforward 7\ndown 9\nup 4\nforward 5\ndown 5\nforward 5\ndown 9\nforward 9\nforward 3\nup 5\nforward 8\nup 5\ndown 1\nforward 8\ndown 3\nforward 6\nup 9\nforward 8\ndown 4\nforward 3\ndown 5\nforward 8\nforward 9\nforward 2\ndown 1\ndown 6\ndown 4\nforward 9\nup 2\ndown 3\ndown 6\ndown 3\ndown 9\ndown 1\nup 6\ndown 2\ndown 7\nup 5\nforward 5\nup 1\ndown 7\nforward 6\nup 6\ndown 2\ndown 3\nforward 3\ndown 5\nforward 8\ndown 9\ndown 7\ndown 8\nup 7\ndown 1\nforward 1\nforward 1\ndown 2\nup 4\nforward 2\ndown 3\nup 2\ndown 3\ndown 2\nforward 7\ndown 1\nup 7\ndown 2\ndown 1\nforward 6\ndown 9\nup 9\ndown 4\ndown 6\nup 9\nforward 7\nforward 9\nforward 7\ndown 4\ndown 1\nforward 7\ndown 4\ndown 7\ndown 3\ndown 5\nforward 3\ndown 8\nforward 8\nforward 7\nforward 8\ndown 4\ndown 9\nforward 2\nforward 7\nup 8\nforward 4\ndown 6\nup 8\ndown 2\nforward 3\ndown 6\ndown 8\nforward 8\nforward 2\nforward 9\nup 6\nforward 7\ndown 3\ndown 5\nforward 8\nforward 9\ndown 3\nforward 3\nforward 2\nforward 3\ndown 8\nup 9\nup 5\nup 2\nup 6\nup 1\nup 1\nup 5\nforward 3\nforward 2\ndown 3\nforward 4"} -->

```elixir
day_2_input =
  Utils.read_textarea("Day 2 Input")
  |> String.split("\n", trim: true)
  |> Enum.map(&String.split(&1, " ", trim: true))
  |> Enum.map(fn [dir, amount] -> [dir, String.to_integer(amount)] end)

%{
  depth: depth,
  horizontal: horizontal
} =
  Enum.reduce(day_2_input, %{depth: 0, horizontal: 0}, fn [direction, amount], acc ->
    case direction do
      "forward" ->
        %{acc | horizontal: acc.horizontal + amount}

      "down" ->
        %{acc | depth: acc.depth + amount}

      "up" ->
        %{acc | depth: acc.depth - amount}

      _ ->
        acc
    end
  end)

depth * horizontal
```

```output
1692075
```

Based on your calculations, the planned course doesn't seem to make any sense. You find the submarine manual and discover that the process is actually slightly more complicated.

In addition to horizontal position and depth, you'll also need to track a third value, aim, which also starts at 0. The commands also mean something entirely different than you first thought:

```
down X increases your aim by X units.
up X decreases your aim by X units.
forward X does two things:
It increases your horizontal position by X units.
It increases your depth by your aim multiplied by X.
```

Again note that since you're on a submarine, down and up do the opposite of what you might expect: "down" means aiming in the positive direction.

Now, the above example does something different:

`forward 5` adds 5 to your horizontal position, a total of 5. Because your aim is 0, your depth does not change.

`down 5` adds 5 to your aim, resulting in a value of 5.

`forward 8` adds 8 to your horizontal position, a total of 13. Because your aim is 5, your depth increases by 8*5=40.

`up 3` decreases your aim by 3, resulting in a value of 2.

`down 8` adds 8 to your aim, resulting in a value of 10.

`forward 2` adds 2 to your horizontal position, a total of 15. Because your aim is 10, your depth increases by 2*10=20 to a total of 60.

After following these new instructions, you would have a horizontal position of 15 and a depth of 60. (Multiplying these produces 900.)

*Using this new interpretation of the commands, calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?*

```elixir
%{
  depth: depth,
  horizontal: horizontal
} =
  Enum.reduce(day_2_input, %{depth: 0, horizontal: 0, aim: 0}, fn [direction, amount], acc ->
    case direction do
      "forward" ->
        %{acc | depth: acc.depth + acc.aim * amount, horizontal: acc.horizontal + amount}

      "down" ->
        %{acc | aim: acc.aim + amount}

      "up" ->
        %{acc | aim: acc.aim - amount}

      _ ->
        acc
    end
  end)

horizontal * depth
```

```output
1749524700
```

## Day 3: Binary Diagnostic

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the power consumption.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the gamma rate and the epsilon rate). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

Each bit in the gamma rate can be determined by finding the most common bit in the corresponding position of all numbers in the diagnostic report. For example, given the following diagnostic report:

```
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
```

Considering only the first bit of each number, there are five 0 bits and seven 1 bits. Since the most common bit is 1, the first bit of the gamma rate is 1.

The most common second bit of the numbers in the diagnostic report is 0, so the second bit of the gamma rate is 0.

The most common value of the third, fourth, and fifth bits are 1, 1, and 0, respectively, and so the final three bits of the gamma rate are 110.

So, the gamma rate is the binary number `10110`, or `22` in decimal.

The epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is `01001`, or `9` in decimal. Multiplying the gamma rate (`22`) by the epsilon rate (`9`) produces the power consumption, `198`.

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. What is the power consumption of the submarine? (Be sure to represent your answer in decimal, not binary.)

<!-- livebook:{"livebook_object":"cell_input","name":"Day 3 Input","type":"textarea","value":"011001101000\n010101111100\n000000111101\n001001001010\n010011000001\n111111001110\n001011101111\n110011010110\n100011111110\n101110000111\n000011011100\n001111111011\n011101001111\n111001010110\n011100011110\n001011000010\n100010111011\n000101010011\n000001101100\n010001011110\n100010101000\n111101011101\n110000100001\n011011010101\n110101100110\n001101101010\n111010110011\n011111111000\n010001010001\n000001010101\n001001011011\n101111110011\n100011010001\n111010010111\n011010011010\n101111011011\n101010111100\n001111100110\n010100110111\n010110101100\n000111110101\n111110101110\n111010000000\n011111111010\n000101011100\n000001010110\n101000100101\n100001011001\n011101110010\n110111100100\n110011001011\n000010001111\n000100010101\n110111001100\n010001100000\n101111110101\n111000011011\n000100001001\n101101011101\n001001011110\n101100111010\n011011000010\n110010010111\n101001010101\n000000101110\n000011011111\n010001000011\n011011001010\n101101111011\n100010001010\n001001011100\n010011110001\n000001111101\n100001000101\n011101011010\n000010101110\n001010101010\n101010011011\n000111001011\n000011101000\n110100101001\n000111111010\n100111100101\n111010001111\n111100110001\n011111101010\n110101000011\n001111101100\n101000100110\n100101100011\n000011010011\n010101011111\n010000110111\n110011001001\n101011011101\n001011100001\n000001100101\n001001001101\n001101001111\n001110110001\n010110101110\n001100110110\n001000001111\n101101001001\n011111011010\n111111101110\n111001100000\n100101011001\n010101100101\n100000110100\n011001001000\n111100110011\n111011110001\n110011111010\n001101001010\n111110011111\n110101100000\n111001000101\n010001111110\n111011010100\n110011010111\n100100110111\n111111011010\n011110101111\n001011110010\n010111011010\n011101101101\n011010101110\n011000110001\n010110101010\n011110010000\n111111011100\n111011000101\n100110101110\n010101100010\n101100011110\n000010110101\n010010011110\n110000000110\n011111010101\n000110110011\n101011000010\n000011000111\n101011010000\n101101101001\n010000101010\n101001001001\n111010110110\n111000111101\n000001010111\n101110001100\n110010110001\n100000110001\n101100101011\n100000111001\n010110100111\n101011001111\n101010111001\n010010110000\n001110010011\n010101101110\n011000010100\n100111111000\n011110100011\n110100100111\n101110101000\n101010101111\n101001000000\n111010000110\n101001000100\n010001100111\n011011010001\n000101010101\n010110000011\n100000101110\n110010001000\n111000100001\n001001101001\n110010001001\n100001111011\n101010010100\n110011100101\n010101100001\n011101010100\n110100101111\n110100001111\n011000101101\n001011101100\n010010010101\n011011111010\n010101000001\n100101100000\n101001111101\n010000000100\n110000110100\n000000001101\n100100111101\n111100110010\n001011001111\n101100001011\n001111010001\n101100011001\n100110110001\n010111000011\n011010110101\n100111100011\n000111110011\n010101111101\n010010000000\n011000011011\n001100011001\n001011001001\n101110101101\n101111110111\n101011100100\n000100110100\n110000101111\n011001111101\n000000000111\n111001001010\n110100001100\n000001001110\n111001101011\n100011011111\n110000001000\n110101011011\n001010000101\n001011111001\n011011111100\n010100110101\n110101111001\n010110010101\n010010001000\n001001110111\n011111111111\n100011100010\n000110001101\n011111010000\n010111110010\n110010100011\n101011110101\n110011011110\n010000000101\n011101100100\n110010011100\n011101101100\n000010001001\n000011101101\n000101100011\n010111111000\n010111100111\n010101000101\n110111100010\n110001101011\n111010100000\n101010101011\n011101010101\n000100110111\n000111100111\n000100111111\n111100001001\n010000100001\n110101011111\n100010000100\n000011011000\n111011110000\n101000011100\n110001001010\n001000010101\n110110000101\n100000011110\n001101111010\n010111001100\n111011111100\n100101001000\n010111101001\n110010010000\n110011010000\n000010100111\n100101111101\n110101100010\n110100011110\n101111010110\n110001001111\n011101000111\n001011001101\n110001000010\n011110100110\n000101100110\n000110111110\n001010111010\n100110000111\n001000010110\n100001110100\n000111000110\n101100011100\n110100110110\n100011010111\n000101110001\n001010010110\n101000000101\n100101101000\n000111111110\n010010010111\n110010001010\n001100110111\n110110110101\n011111011101\n110101100111\n100100100111\n011011000000\n111101001100\n011101000011\n011101001010\n101101101101\n100100110010\n001000000010\n010010001010\n111110111001\n000111010001\n011100111111\n011111011001\n110101000000\n011110000010\n001111010110\n010011111111\n110101111011\n101110111111\n001001100001\n011100111100\n110111001110\n011000000111\n001100010111\n001011010010\n010010001011\n101110000011\n100000101000\n100010100100\n000111011101\n001000111011\n010010101010\n111011010011\n110100010001\n011110001110\n111010110001\n010000010111\n010110101101\n111101100001\n110011100110\n000101111110\n110010101010\n000001010000\n001101111101\n011011110100\n110001010101\n011001000001\n001101101100\n100011011011\n101011100010\n011011100101\n100110110101\n110111001011\n000100101011\n001101010100\n010000011100\n101100111011\n011001011100\n011011010100\n011100110001\n010010110011\n101000110011\n111101010001\n111000000100\n101101100111\n001011111000\n010100000111\n011110101101\n111011101100\n110101110001\n001110010000\n010010000111\n101001111011\n100100111100\n000101101101\n101111110100\n100000101111\n011001110000\n011110011001\n000101010110\n000000000101\n110010001100\n000111100100\n010010011010\n001111110100\n011010001010\n101100101111\n011001001011\n100011111101\n101100000001\n100100101010\n000000000100\n111001110101\n000010011110\n110110100100\n111010010001\n011101010010\n011100101111\n010110000010\n010000110101\n110101010011\n001110011110\n111010011010\n000110101000\n001111000001\n010110110000\n001100110001\n110011011111\n000100111011\n110001000111\n011010111101\n000010100110\n010100101001\n010001000010\n000101110101\n101100110100\n111000110010\n111011110010\n010111001111\n100000101101\n101100001010\n100100001001\n111111111101\n001010101001\n000011011010\n101011010010\n111001000110\n111100010011\n111010011100\n100000111100\n011100001101\n110001101000\n101111011001\n001100001000\n101110010111\n011111100000\n001011100000\n101011101010\n110010101111\n001110000101\n001111011011\n011110101000\n111000001000\n010100111010\n010010111001\n110000110001\n110011000101\n001110000100\n010100101101\n101010110100\n100001010100\n100011010011\n100000010010\n011101010111\n001000010111\n001100111100\n000110100011\n101111101010\n010001010000\n001100100110\n111001111110\n101000001001\n000010110010\n110111101011\n101011000011\n001000111111\n100011001101\n011010010101\n110011100011\n110010011010\n110001010100\n100010111101\n101110000110\n010111001011\n110011011100\n110001100011\n000100011010\n111011100010\n011110110011\n011111100010\n000100001101\n100010010000\n110000000011\n101001011000\n101100110101\n001010101011\n011001011010\n001010001001\n001111011100\n111100010001\n100011010110\n001000110111\n011011010011\n001100000000\n100001111100\n000011110101\n100010000111\n000010110011\n000010111110\n011110000101\n010000001011\n001111110010\n001110001001\n011101111111\n010110110001\n110000000111\n010101011101\n010111001001\n100100010010\n101001101110\n100001001010\n010001011101\n100111010101\n100000101011\n000100101001\n110111001001\n100100000001\n010111010010\n111101111011\n011010010010\n111101101000\n100110111101\n010010001001\n100111011000\n110101111111\n111010101110\n010011110010\n101001100100\n010000101111\n010011001111\n110010011111\n101110100111\n011010100101\n111111001001\n010101100110\n101001001101\n001000101010\n010001001100\n101001101000\n110110100000\n011101000101\n100101010101\n101110111011\n010010101001\n110100011000\n110101111010\n110000100000\n010011101101\n111011001101\n100100011101\n110100010111\n011100110100\n010111011001\n011101010001\n101000000010\n100111111001\n100100001000\n001000001000\n001000000100\n011110110010\n010101010011\n101101101100\n110111111001\n010000010011\n100010100001\n000110101111\n101010101101\n100101111100\n000111010110\n001101101111\n110010000011\n110100001110\n011111111101\n111011010101\n001010100010\n100010100110\n101101110111\n010110011011\n111001110110\n011110101001\n110011100111\n000100111101\n101100011000\n101101001010\n011111100111\n010000011000\n100001100110\n000000101101\n000111010010\n110000001100\n111111101010\n001000100010\n111111111011\n001011100111\n000101110010\n010111110011\n010000011001\n111001111101\n110100001101\n010001101000\n110000101011\n011011000110\n110010111011\n100111101010\n011001101011\n001101010011\n011000100101\n110111101111\n001000100001\n010010111101\n101101101011\n011111011100\n111111010110\n001110000000\n101011110010\n011101011111\n001001101101\n011101110000\n011100011101\n111101001101\n010111010101\n010111101010\n001000101101\n100000000011\n111110101111\n000111101111\n001110010101\n101111001101\n111100110000\n110010100000\n011101110100\n100011001111\n010110001001\n111100101100\n101001110100\n011010010111\n011000100100\n001100110100\n001001111000\n001000000111\n110100000111\n011000001011\n001011000000\n110110110111\n000010111011\n001001000011\n000011100111\n110011001111\n010000111101\n001110100010\n000011110001\n011001111011\n110111000001\n111111000001\n011001100110\n110010101100\n111101010100\n010010000101\n000011011011\n110110010001\n010111111010\n010000010101\n110000011010\n110001101110\n000110101011\n101111000111\n001101100000\n010100000001\n111110001001\n000011110000\n111100111001\n000001001011\n011000010110\n000001000100\n011100111000\n001011111110\n011100000000\n000101001011\n111111110110\n111010011000\n001000111101\n011001110010\n001101011100\n100110001111\n110110111010\n001110101100\n010000101100\n010011000011\n100101110010\n000000111010\n000001111001\n111101011000\n101000011001\n111110000101\n101111111011\n100110111110\n000110010110\n011011101110\n100000010111\n110111001000\n000010101010\n001010011011\n101010101010\n101100000000\n000101101011\n010110100110\n110010010100\n001010110101\n001110000001\n010001101010\n111111110100\n001101110110\n111101010111\n101011101100\n110001101010\n100111010100\n101101111001\n001011100110\n010010001111\n100101110110\n110011000010\n001111010100\n000101011011\n110000000001\n011011001001\n001001011111\n000111011111\n100001001100\n111011010010\n010101011001\n000001110100\n000010100101\n110110010010\n100010111110\n011110111110\n000001101000\n001011000110\n000010001010\n101101010100\n011011010000\n000011111000\n101000001110\n011110101011\n110100111000\n000011000010\n111111010001\n011101110001\n100000111101\n110100101101\n110000100101\n011001110110\n110001010010\n010010110110\n011110001000\n111010110100\n101111110010\n110000110111\n111101110100\n110111101110\n100110010111\n001001100011\n001110111000\n101110100100\n010000101101\n010111100101\n011001100010\n011100000101\n101001111001\n100011001010\n100010000010\n100101000010\n111111100101\n100001101110\n101001010110\n100000100011\n100000011000\n000110000001\n000000011011\n011000110101\n011010111011\n111110000001\n001001110100\n001011011110\n110111010110\n011101110101\n101111000101\n100001010010\n000001111000\n001110010100\n111111101100\n001011010001\n111001111001\n100101101010\n111000000010\n010101001010\n001010000010\n101011000110\n110011001010\n001000011000\n001010010011\n110000111101\n001001100000\n111101100111\n011001001100\n001100111011\n100001010101\n111010100011\n111000011111\n001000000000\n101110011001\n000000000011\n111011000111\n011010100011\n110000110000\n000011001001\n011000010001\n011110000011\n011101000000\n010100110011\n010110010001\n111001101111\n110111110100\n110111110110\n100111001011\n111100110110\n101010001110\n100110000010\n011011100001\n001101010010\n010001110011\n010011110000\n110010100111\n001101110100\n101010101100\n110000111000\n011101110110\n101011110001\n110011000000\n010000011011\n001011010000\n010111010001\n010100010101\n110101000100\n010011101011\n010110111001\n101111000011\n011011100000\n000010100010\n001100110000\n110000111001\n100100100000\n001101000010\n100000010011\n100010011110\n110101010000\n000100000101\n000111000001\n000001111011\n100111011101\n110111110111\n011101111000\n001001000110\n100110010011\n100011100111\n010011010000\n010011010111\n001101100101\n010000010110\n000101010001\n011111010100\n010010111100\n001010101110\n110000001011\n011001010101\n000001111110\n010111111011\n011110010010\n001001101100\n101100101000\n100000001110\n110001001110\n011110111011\n001000110011\n111100110111\n001101100111\n000110110000\n000010011011\n100110111010\n111110001100\n000000101100\n110000111100\n100110111100\n110111111100\n110000111010\n100001100100\n100010011010\n011011100110\n110100010110\n001001010101\n000110101110\n101001100000\n100010110011\n111000001101\n101110100110\n100010111100\n000101110110\n000011011001\n000001010100\n101100111001\n011101111101\n011110011000\n111010001011\n010101110101\n100001100101\n100110100010\n100110011000\n001010100110\n011001010111\n111111001010\n111111001000\n111110100101\n000101000011\n110101101111\n110100010010\n011100000010\n001000010100\n101100000111\n001010111111\n101001010011\n101011001000\n001100000011\n010010101000\n101101111101\n101001010010\n100101111011\n101110101110\n100000100100\n000000000010\n011101100011\n110000110110\n101000110000\n111011111010\n010111000110\n001111110110\n100111110110\n100110011101\n000000001000\n101110111010\n000101011000\n001011100011\n011101100111\n000011000011\n000101011001\n110101101101\n101000001111\n111000010101\n000011100010\n011010111001\n001100100101\n010111111101\n010101111011\n000101001100\n101010000111\n111100111111\n100000000111\n110111110011\n000110110111\n010011011111\n100110010100\n000100111110\n001000111001\n011111000001\n001010100101\n101010001100\n011100001011\n000101001111\n010010101111\n101000111011\n001101000001\n100100100001\n100010101111\n100111111110\n011011111001\n101000000001\n111001101101\n101011010101\n111111100110\n001010010100\n011101111001\n001100100000\n101001110110"} -->

```elixir
day_3_input =
  Utils.read_textarea("Day 3 Input")
  |> String.split("\n", trim: true)

transposed_day_3_input =
  Enum.map(day_3_input, &String.split(&1, "", trim: true))
  |> Enum.zip()
  |> Enum.map(&Tuple.to_list/1)

%{gamma: gamma, epsilon: epsilon} =
  Enum.reduce(transposed_day_3_input, %{gamma: "", epsilon: ""}, fn curr, acc ->
    %{"1" => num_ones, "0" => num_zeros} = Enum.frequencies(curr)

    cond do
      num_ones > num_zeros -> %{acc | gamma: "#{acc.gamma}1", epsilon: "#{acc.epsilon}0"}
      true -> %{acc | gamma: "#{acc.gamma}0", epsilon: "#{acc.epsilon}1"}
    end
  end)

{gamma_int, _} = Integer.parse(gamma, 2)
{epsilon_int, _} = Integer.parse(epsilon, 2)

gamma_int * epsilon_int
```

```output
3374136
```

Next, you should verify the life support rating, which can be determined by multiplying the oxygen generator rating by the CO2 scrubber rating.

Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and consider just the first bit of those numbers. Then:

Keep only numbers selected by the bit criteria for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
If you only have one number left, stop; this is the rating value for which you are searching.
Otherwise, repeat the process, considering the next bit to the right.
The bit criteria depends on which type of rating value you want to find:

To find oxygen generator rating, determine the most common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 1 in the position being considered.
To find CO2 scrubber rating, determine the least common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 0 in the position being considered.
For example, to determine the oxygen generator rating value using the same example diagnostic report from above:

* Start with all 12 numbers and consider only the first bit of each number. There are more 1 bits (7) than 0 bits (5), so keep only the 7 numbers with a 1 in the first position: 11110, 10110, 10111, 10101, 11100, 10000, and 11001.
* Then, consider the second bit of the 7 remaining numbers: there are more 0 bits (4) than 1 bits (3), so keep only the 4 numbers with a 0 in the second position: 10110, 10111, 10101, and 10000.
* In the third position, three of the four numbers have a 1, so keep those three: 10110, 10111, and 10101.
* In the fourth position, two of the three numbers have a 1, so keep those two: 10110 and 10111.
* In the fifth position, there are an equal number of 0 bits and 1 bits (one each). So, to find the oxygen generator rating, keep the number with a 1 in that position: 10111.
* As there is only one number left, stop; the oxygen generator rating is 10111, or 23 in decimal.

Then, to determine the CO2 scrubber rating value from the same example above:

Start again with all 12 numbers and consider only the first bit of each number. There are fewer 0 bits (5) than 1 bits (7), so keep only the 5 numbers with a 0 in the first position: 00100, 01111, 00111, 00010, and 01010.
Then, consider the second bit of the 5 remaining numbers: there are fewer 1 bits (2) than 0 bits (3), so keep only the 2 numbers with a 1 in the second position: 01111 and 01010.
In the third position, there are an equal number of 0 bits and 1 bits (one each). So, to find the CO2 scrubber rating, keep the number with a 0 in that position: 01010.
As there is only one number left, stop; the CO2 scrubber rating is 01010, or 10 in decimal.
Finally, to find the life support rating, multiply the oxygen generator rating (23) by the CO2 scrubber rating (10) to get 230.

Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together. What is the life support rating of the submarine? (Be sure to represent your answer in decimal, not binary.)

```elixir
defmodule Day3 do
  def find_rating(input, :oxygen) do
    find_rating(input, "1", "0")
  end

  def find_rating(input, :co2) do
    find_rating(input, "0", "1")
  end

  defp find_rating(input, most_common_digit, least_common_digit) do
    size_of_binary_string =
      Enum.max_by(input, &String.length/1)
      |> String.length()

    [rating] =
      Enum.reduce_while(Range.new(0, size_of_binary_string), input, fn index, acc ->
        frequencies = Enum.frequencies_by(acc, &String.at(&1, index))

        num_ones = Map.get(frequencies, "1", 0)
        num_zeros = Map.get(frequencies, "0", 0)

        cond do
          length(acc) == 1 ->
            {:halt, acc}

          num_ones >= num_zeros ->
            {:cont, Enum.filter(acc, &(String.at(&1, index) == most_common_digit))}

          num_ones < num_zeros ->
            {:cont, Enum.filter(acc, &(String.at(&1, index) == least_common_digit))}
        end
      end)

    {rating_int, _} = Integer.parse(rating, 2)

    rating_int
  end
end

oxygen = Day3.find_rating(day_3_input, :oxygen)
co2 = Day3.find_rating(day_3_input, :co2)

oxygen * co2
```

```output
4432698
```

## Day 4: Giant Squid

You're already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can't see any sunlight. What you can see, however, is a giant squid that has attached itself to the outside of your submarine.

Maybe it wants to play bingo?

Bingo is played on a set of boards each consisting of a 5x5 grid of numbers. Numbers are chosen at random, and the chosen number is marked on all boards on which it appears. (Numbers may not appear on all boards.) If all numbers in any row or any column of a board are marked, that board wins. (Diagonals don't count.)

The submarine has a bingo subsystem to help passengers (currently, you and the giant squid) pass the time. It automatically generates a random order in which to draw numbers and a random set of boards (your puzzle input). For example:

`7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1`

```
22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7
```

After the first five numbers are drawn (7, 4, 9, 5, and 11), there are no winners, but the boards are marked as follows (shown here adjacent to each other to save space):

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

After the next six numbers are drawn (17, 23, 2, 0, 14, and 21), there are still no winners:

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

Finally, 24 is drawn:

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

At this point, the third board wins because it has at least one complete row or column of marked numbers (in this case, the entire top row is marked: 14 21 17 24 4).

The score of the winning board can now be calculated. Start by finding the sum of all unmarked numbers on that board; in this case, the sum is 188. Then, multiply that sum by the number that was just called when the board won, 24, to get the final score, 188 * 24 = 4512.

To guarantee victory against the giant squid, figure out which board will win first. What will your final score be if you choose that board?

<!-- livebook:{"livebook_object":"cell_input","name":"Day 4 Input","type":"textarea","value":"31,50,68,16,25,15,28,80,41,8,75,45,96,9,3,98,83,27,62,42,59,99,95,13,55,10,23,84,18,76,87,56,88,66,1,58,92,89,19,54,85,74,39,93,77,26,30,52,69,48,91,73,72,38,64,53,32,51,6,29,17,90,34,61,70,4,7,57,44,97,82,37,43,14,81,65,11,22,5,36,71,35,78,12,0,94,47,49,33,79,63,86,40,21,24,46,20,2,67,60\n\n95 91 54 75 45\n46 94 39 44 85\n31 43 24  2 70\n90 58  4 30 77\n13 26 38 52 34\n\n68 14 99 63 46\n67 16 82 10  8\n55 52 41 51  4\n90 17 32 44 74\n89 94 73 56 36\n\n 6 91  2 28 71\n 7 88 37 21 36\n95 32 84 57  8\n13 79 89 75 48\n47 81 66 17  5\n\n44 55 48 16 41\n35  5 43 53 11\n 0 79 19 82 49\n30 85 31 72 39\n27 68 65 66 95\n\n 6 46 55 24 40\n87 16 62 11 64\n 8 49 18 59 91\n72 28 48 19 96\n39 73  9 88  0\n\n46  1 18 93  6\n50 96 41 81 58\n62 66 49 32 55\n29 11 65  2 10\n71 30 17 69 43\n\n84 57  6 56 95\n39 15 32  1 10\n55 43 40  3 22\n89 54 13 80 38\n72 12 59 71 77\n\n 3 51 72 88  6\n56 64 99 82 36\n75 81 42 67 24\n41 79 35 40 73\n 2 14 61 50 87\n\n72  7  0 99 24\n29 81 92 74 38\n84 53 20 56 91\n93 64 44 48  2\n37 40 88 96 97\n\n39 87 99 75 38\n45 81 46 72 62\n40  8 24 67 79\n96  1 77 73 70\n34 13 55 83 59\n\n18 38 55 84 58\n35 97 31 26 44\n80  1 28 71 85\n45 46 10 32 99\n60 48 72 11 53\n\n53 44  6 30 82\n65 64 10  0 86\n81 50  5 21 60\n16 19 97 66 73\n20 24 96 68 69\n\n33 85 88 58 20\n19  2 99 40 70\n69 10 17 67 23\n48  9 29 34  3\n89 30 43 41 94\n\n30 83 37 14 78\n57 42 98 90 28\n 5 82 51 15 55\n77 79 96 67 53\n22 76  0 59 47\n\n10 93 84 54 11\n59 30  6 94 75\n 9 62 68 37 24\n61  3 66 58 74\n64  0 83 32 13\n\n24 77 15  5 49\n23 11 70 17 10\n62 33 38 36 12\n 3 61  0 26 65\n63 47 54 50  9\n\n34 28 24 55 38\n69 37 36 32 72\n91 85  9 64 68\n94 22 96 90 82\n30 20 97 19 56\n\n35 90 58 93  2\n72  8 27 88 16\n25 54 69 60 61\n 1 15  9 71 78\n89 42 46 57 91\n\n43 38 47  1 82\n19 32  2 95 51\n78 74 91 10 22\n80 77 33 60 14\n 0 98 70 54 50\n\n71 94  3 84 31\n10 59 12 28 46\n68 69 13 48 36\n37 49 24 26 61\n72 65 38 16 25\n\n68 78 10 90 29\n40 14 45 43 44\n27 75 72 39 87\n96 93 53 12 11\n37 64 56 59 76\n\n19 78 84 68 41\n36 96 87 15 55\n47 33 10 91 85\n11 94 31 49 35\n83 63 86  4 76\n\n 5 89 55 46 96\n67 22 95 82 56\n61 94 84 99 28\n71 70 16 57 63\n98 92 86 73 83\n\n56 24 93 88 29\n74 89 50 44 79\n97 49 87 31  8\n70  6 57  3 82\n20 25 99 48 78\n\n80 20 45 22 57\n43 35 48 44 52\n29 98 38 27 11\n64 49 84 60 31\n 7 97 17 85 74\n\n21  1 18 41 62\n76 38 13 46 27\n 0 16 43 28 53\n54 42 22 83 20\n 4 25 50 11 56\n\n21 71 73 30 51\n92 27 14 16 11\n89 43 38 62 31\n65  4 36 84 94\n56 13 59 22  6\n\n46 28 45 57  6\n16 67 33 20 44\n36 86 92  3 11\n98 27 26 84 31\n 5 76 13 65 25\n\n49 55 99 31 73\n80  0 83 26 65\n 3 96 60 37 50\n57 34  7 20 23\n70 52 93 13 71\n\n78 41 81 32 76\n37 36 16 99 48\n 3 93 33 85 35\n60 38 74 80 56\n86 29 87 20  7\n\n98 24  4  9 82\n22 37 52 81 30\n51 70 17 23  8\n60 61 75 35 85\n33 48 88 13 57\n\n49 52 91 21 46\n90 51 70  5 35\n57 68 31 86 87\n42 36 25 95  3\n73 64 17 96 80\n\n 6 42 13 16 24\n51 72 55 78 47\n67 28  7 97 64\n44 77 98 71 25\n82  8 31 76 73\n\n63 79 18 80 27\n57 66 47 89 14\n15 61 94 38 29\n21 53 73 17 76\n65  7 23 36  3\n\n93 22  8 52  4\n63 31 90 46 68\n51 14 95 50 23\n17 34 60 75 36\n88 55  7  0 73\n\n42 67 91 15 83\n 1 37 76 12 25\n29 82 50 70 86\n74 66 39 90 16\n31 71 47  5 92\n\n98 48 27 87  2\n60  0 25 30 14\n44 61 94 82 16\n17 19 53 49 59\n15 85 50 63  8\n\n63 12 52 81 97\n87 68 44 31 41\n39 24 99 27  6\n 1 21 35 59 51\n 4 92  3 90 62\n\n66 43 98 25 47\n59 16 75 44 82\n40 58 48 60 37\n13 81 61 45 83\n24 89 93 19 67\n\n 8 86 47 81 83\n 1 91 57 59 68\n 0 52 25 93 95\n27 84 63 45 36\n39 62 20 99 88\n\n67 28 65  4 17\n44 33 12 99 84\n27 36 34  5 10\n38 63 97 82 64\n94 19 58 41  6\n\n28 41 96 16 39\n93 78 56 69 75\n74 60  9 30  7\n12 81 35 84 94\n45 20  6 49  2\n\n33  7  5 43  9\n97 65 50  2  1\n26 86 76 47 98\n83 31 30 58 52\n93 51 34 63 12\n\n65 81 10 46 59\n51 89 85  2 52\n13 54 18 70  4\n37 94 75 92 56\n58 99 91 32 41\n\n44 23 18 16 75\n 5  3 45 76 90\n20 71 69 37 99\n49 91 43 32 82\n 4 79 51  2 39\n\n54 80 71 61 76\n81 52  6 89 34\n58 14 20 26 40\n25 60 45  0  3\n36 33 65 41 94\n\n53 23 56 55 92\n 3 81 59  0 35\n32 30 93 70 40\n45 91 24 65  6\n95 88 16 47  8\n\n24 23 10 47 63\n38 79 18 77 62\n13 88 72 68 36\n96 27 12 69 89\n28 94  6 98 20\n\n70  1 61 77 28\n92 22 30 48 96\n66  3 34 29 45\n85  6 17 87  5\n97 89 14 80 20\n\n40 86 97  5 54\n91 57 12 19  7\n62 88 92 20 32\n50 77 11 39 22\n33  2 21 95 35\n\n51 79 64 24 28\n95 19 82 58 76\n69 30  9 14 42\n27 16 56 80 83\n52  5 49 43 45\n\n26 65 68 18 55\n58 83 30 48  4\n69 42 78 96 22\n91 13 82 38 41\n67 33 10 98 53\n\n74 97 43  1 18\n49 30 28 10 15\n42 12 80 20 96\n41 92 67 22 36\n 5 26 13 47  4\n\n85 60 72 19 48\n61 21 43 34 83\n51 75 94 11 78\n27 89 45 49 79\n97 15  5 28 50\n\n69 99 97 77 98\n37 80 86  7 34\n85 28 31 23 16\n32 47  8 40  4\n46 91 71 54 74\n\n23 43 29  7 21\n58 34 42  4 38\n64 96 16 73 49\n36 92 52 81 31\n85 71 78 13  5\n\n65 71 46  5 11\n24  4  6  0 23\n13 17 76 15 34\n27 79 10 56 85\n90 19 30 94 78\n\n81 40 65 12 35\n23 93 24 96 53\n27 60 87 59 33\n76 56  4 17  6\n78 49 90  3 80\n\n 7 25 42 85 39\n40  6 26 11 63\n48 20 62 61 89\n78 15 18 21 53\n69  4 87 47  5\n\n38 65 87 72 26\n88 75 10 30  3\n89 58  7 20 32\n85  2 97 63 15\n28 77 82 57 64\n\n16 89  6 31 27\n45 69 61  5 15\n40 75 64 94 98\n36 18 26 58 90\n10 44 59 13 67\n\n80 13 39 49 42\n50 94 12 14 88\n97 48 15 68 69\n21 18 51 99 91\n89 64 35 63 84\n\n81 96 26 43 30\n 5 74  9 93 60\n63 41  1 14 22\n 4 77 33 53  3\n38 90 50 25 10\n\n58 66 17  0 16\n 5 67 41 48 40\n43 93 76 95 68\n 4 13 14 51  8\n56 74 23 57 94\n\n18 15 92  4 20\n69 26 84 23  2\n72 35 56 96  9\n61 41 85 91 25\n13 70  1 14 77\n\n15 20 77 80 47\n45 34 63 55 75\n65 12 66 44 22\n74  3 25 38 93\n 9 31 68 87 67\n\n54 95 79 50 75\n18 36 20 34 43\n17 65 55 98 61\n27 46 56  6 52\n91 31 30 40  0\n\n25 30 24 64 98\n 8 72 53 45  3\n27 77  0 33 44\n89 39 34 71 38\n54 21 20 80 23\n\n69 38 63 60  4\n55 37 83 68 61\n67 25 86 24 18\n22 59 65 28 70\n84 46 44 91 96\n\n35 27 65 31  0\n46 97 44 74  4\n56 61  7 49 88\n 5 38 50 20 26\n62  9 45 64 51\n\n 3 28 43 97  7\n88 57 17 82 73\n16 94 74 22 39\n84 99 31  1 47\n92 91 55 38 78\n\n60 31 29 49 72\n89 41  5 79 22\n58 28 90 76 95\n93 45 14 47 37\n65 25  7 59 62\n\n58  1 73 30 55\n95 46  5 80 63\n52 16 70 20 71\n84 60 15  0 77\n99 89 17 72 31\n\n83 21 68 18 42\n 1 28 97 31 35\n 2 38 67 63 74\n77 27 48 90 86\n12 52 26 29 60\n\n81 53 80 85 96\n19 32 31 15 88\n91 92 66 37 34\n74 75 33 39 78\n42 40 30 83 58\n\n40 41 80 69 67\n24 63 97 33  5\n28 84 34 72 11\n36 79 91 14 92\n55 89 59 10 44\n\n 0 51 49 24 60\n48 65 28 70 66\n86 58 78 77 18\n 6 44 50 37 36\n 4 73 91 97 43\n\n66 42 76 12 48\n77 83 35 18 50\n30 87 95 99 11\n 0 52 92 16 51\n26 56 39 64 62\n\n83 89 52 61 45\n74 77 66 59 30\n85 17 38 10  8\n97 67 54 21 26\n34 63 11 94 40\n\n93 91 14 49 38\n77 53 29 36 39\n12 52  0 48 92\n95 82 71 76 37\n19 70 75  9 74\n\n80 49 59 67 27\n43 66 97 81 12\n10 77 24 75 68\n16 57 14 28 85\n41 52 23 15  2\n\n39 89 66 27 11\n63 84 21 44 69\n56 51 58 70 83\n14  0  8 41 31\n98 18 61 97 74\n\n97 18 63 29 24\n75 73 80  8  7\n81 37 46 93 68\n57 32  2 41  5\n 4 65 88 45 54\n\n87 26 81 12 50\n19  9 68 23 71\n74 38  4 34 16\n18 99 86 45  7\n35  8 11 98 57\n\n13 31 78 59 58\n51 61 96 68 44\n41 85 26 55 92\n11 62 30  7 64\n18 19 73 27 17\n\n48 85 71 39 29\n33 79 24  0 72\n95 52 12 77 40\n70 31 46 44 43\n61 88 73 49 65\n\n60 81 51 24 27\n23 28 47 85 67\n35 57 45 76 84\n19 48 30 37 74\n15 78 56 87 16\n\n12  5 45 26 21\n 1 71 51 10 25\n37 68 73 46 56\n55 20 63 87 91\n22 32 66 90 19\n\n20 59 12 29 97\n92 30 77 27 49\n14 98 23 50  6\n11 47 61 34 36\n55 82 13 22 21\n\n29 37  0 40 71\n 2 43 97 18 59\n32 72 89 99 24\n58 90 73 60 85\n69 53 95 78 27\n\n58 28 32 52 55\n86 33  1 41 60\n 8 53 42 92  5\n43 69 96 54 24\n74 10 17 89 85\n\n51 74 99 21 64\n54 27 60 32 37\n14 45 50 81 94\n28 11 77 17 23\n93 95 53 57 79\n\n16  5 80 45 71\n22 57  9 90 43\n 3 52 47 59 84\n28 53 14 15  7\n50 76 46 56 34\n\n83 62 77 56 26\n82 35 11  6 51\n96 97 15  1 78\n92 45 55 84 94\n20  8 70 21 31\n\n 4 47 68 81 12\n66 23 35  8 39\n73 94 27 69 22\n59 11 53 26 99\n 7 20 87 60 88\n\n90  0 88 81 43\n47 54 42 29 97\n60 13 85 51 71\n56 14 94 80 41\n75  8 35 69 61\n\n51 38 40 17 42\n19 26 92 64 67\n33 66 82 27 55\n62  2 68 59 31\n 7 24 20 91 79\n\n21 83 45 35 88\n85 11  5 86 72\n78  3 58  0 89\n67  1 39 59 63\n79 87 19  4 57\n\n25 16 40 17 27\n96 72 29 32 87\n50 63 35 81 66\n 7 11 92 68 69\n54 83 12 51 95\n\n64 98 67 54 75\n 8 10 31  5 57\n89 23 25 34 47\n72 74 37 48 94\n39 59 15 55 87"} -->

```elixir
defmodule Day4 do
  def parse_board(board_string) do
    String.split(board_string, "\n", trim: true)
    |> Enum.map(fn row ->
      String.split(row, " ", trim: true)
      |> Enum.map(&String.to_integer/1)
    end)
  end

  def transpose(board) do
    Enum.zip(board)
    |> Enum.map(&Tuple.to_list/1)
  end

  def find_winning_board(bingo_numbers, boards) do
    transposed_boards = Enum.map(boards, &transpose/1)
    all_boards = Enum.concat(transposed_boards, boards)

    Enum.reduce_while(bingo_numbers, %{called_numbers: [], winning_boards: []}, fn num, acc ->
      called_numbers = acc.called_numbers ++ [num]

      winning_boards =
        Enum.filter(all_boards, fn board ->
          board_has_winning_row?(board, called_numbers)
        end)

      cond do
        length(winning_boards) >= 1 ->
          {:halt,
           %{acc | winning_boards: winning_boards, called_numbers: acc.called_numbers ++ [num]}}

        true ->
          {:cont, %{acc | called_numbers: called_numbers}}
      end
    end)
  end

  def calculate_score(bingo_numbers, boards) do
    %{winning_boards: [winning_board], called_numbers: called_numbers} =
      find_winning_board(bingo_numbers, boards)

    sum =
      List.flatten(winning_board)
      |> Enum.reject(fn num ->
        num in called_numbers
      end)
      |> Enum.sum()

    sum * List.last(called_numbers)
  end

  def board_has_winning_row?(board, called_numbers) do
    Enum.any?(board, fn row ->
      MapSet.subset?(MapSet.new(row), MapSet.new(called_numbers))
    end)
  end
end

[number_string | board_strings] =
  Utils.read_textarea("Day 4 Input")
  |> String.split("\n\n", trim: true)

bingo_numbers = String.split(number_string, ",", trim: true) |> Enum.map(&String.to_integer/1)

boards = Enum.map(board_strings, &Day4.parse_board/1)

Day4.calculate_score(bingo_numbers, boards)
```

```output
49860
```

On the other hand, it might be wise to try a different strategy: let the giant squid win.

You aren't sure how many bingo boards a giant squid could play at once, so rather than waste time counting its arms, the safe thing to do is to figure out which board will win last and choose that one. That way, no matter which boards it picks, it will win for sure.

In the above example, the second board is the last to win, which happens after 13 is eventually called and its middle column is completely marked. If you were to keep playing until this point, the second board would have a sum of unmarked numbers equal to 148 for a final score of 148 * 13 = 1924.

Figure out which board will win last. Once it wins, what would its final score be?

```elixir
defmodule Day4PartTwo do
  def find_winning_boards(bingo_numbers, boards) do
    all_boards =
      Enum.map(boards, fn board ->
        {Day4.transpose(board), board}
      end)

    Enum.reduce_while(
      bingo_numbers,
      %{called_numbers: [], winning_boards: [], boards_in_play: all_boards},
      fn num, acc ->
        called_numbers = acc.called_numbers ++ [num]

        new_boards_in_play =
          Enum.reject(acc.boards_in_play, fn {transposed_board, board} ->
            Day4.board_has_winning_row?(board, called_numbers) or
              Day4.board_has_winning_row?(transposed_board, called_numbers)
          end)

        winning_boards =
          Enum.filter(acc.boards_in_play, fn {transposed_board, board} ->
            Day4.board_has_winning_row?(board, called_numbers) or
              Day4.board_has_winning_row?(transposed_board, called_numbers)
          end)
          |> Enum.map(&elem(&1, 1))

        cond do
          length(new_boards_in_play) == 0 ->
            {:halt,
             %{
               acc
               | winning_boards: acc.winning_boards ++ winning_boards,
                 called_numbers: called_numbers
             }}

          true ->
            {:cont,
             %{
               acc
               | called_numbers: called_numbers,
                 boards_in_play: new_boards_in_play,
                 winning_boards: acc.winning_boards ++ winning_boards
             }}
        end
      end
    )
  end

  def calculate_score(bingo_numbers, boards) do
    %{winning_boards: winning_boards, called_numbers: called_numbers} =
      find_winning_boards(bingo_numbers, boards)

    sum =
      List.last(winning_boards)
      |> List.flatten()
      |> Enum.reject(fn num ->
        num in called_numbers
      end)
      |> Enum.sum()

    sum * List.last(called_numbers)
  end
end

Day4PartTwo.calculate_score(bingo_numbers, boards)
```

```output
24628
```

## Day 5: Hydrothermal Venture

You come across a field of hydrothermal vents on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.

They tend to form in lines; the submarine helpfully produces a list of nearby lines of vents (your puzzle input) for you to review. For example:

```
0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2
```

Each line of vents is given as a line segment in the format x1,y1 -> x2,y2 where x1,y1 are the coordinates of one end the line segment and x2,y2 are the coordinates of the other end. These line segments include the points at both ends. In other words:

An entry like `1,1 -> 1,3` covers points `1,1`, `1,2`, and `1,3`.
An entry like `9,7 -> 7,7` covers points `9,7`, `8,7`, and `7,7`.
For now, only consider horizontal and vertical lines: lines where either x1 = x2 or y1 = y2.

So, the horizontal and vertical lines from the above list would produce the following diagram:

```
.......1..
..1....1..
..1....1..
.......1..
.112111211
..........
..........
..........
..........
222111....
```

In this diagram, the top left corner is 0,0 and the bottom right corner is 9,9. Each position is shown as the number of lines which cover that point or . if no line covers that point. The top-left pair of 1s, for example, comes from 2,2 -> 2,1; the very bottom row is formed by the overlapping lines 0,9 -> 5,9 and 0,9 -> 2,9.

To avoid the most dangerous areas, you need to determine the number of points where at least two lines overlap. In the above example, this is anywhere in the diagram with a 2 or larger - a total of 5 points.

Consider only horizontal and vertical lines. At how many points do at least two lines overlap?

<!-- livebook:{"livebook_object":"cell_input","name":"Day 5 Input","type":"textarea","value":"973,543 -> 601,915\n758,846 -> 758,168\n511,976 -> 568,976\n858,536 -> 858,677\n256,238 -> 265,238\n475,919 -> 718,919\n973,912 -> 134,73\n984,159 -> 175,968\n166,641 -> 15,490\n504,798 -> 504,946\n717,796 -> 128,207\n302,713 -> 168,713\n830,964 -> 830,444\n151,288 -> 549,686\n530,908 -> 820,908\n540,394 -> 717,394\n581,614 -> 581,496\n111,593 -> 230,712\n938,884 -> 938,917\n923,71 -> 20,974\n530,677 -> 530,332\n144,723 -> 144,980\n700,376 -> 700,917\n501,95 -> 198,95\n251,900 -> 435,900\n912,931 -> 96,115\n962,140 -> 181,921\n104,244 -> 104,178\n504,865 -> 504,612\n301,284 -> 301,173\n973,980 -> 17,24\n886,166 -> 886,455\n380,150 -> 971,741\n57,405 -> 135,405\n515,569 -> 774,310\n227,233 -> 874,880\n75,33 -> 75,290\n487,434 -> 983,930\n17,279 -> 20,279\n719,838 -> 508,627\n262,254 -> 555,254\n516,626 -> 631,511\n352,305 -> 352,715\n876,827 -> 876,731\n372,85 -> 372,344\n619,773 -> 619,799\n885,627 -> 441,627\n779,731 -> 42,731\n806,756 -> 806,237\n378,540 -> 187,540\n840,296 -> 210,296\n250,234 -> 171,234\n249,100 -> 757,608\n787,23 -> 787,826\n690,175 -> 365,175\n238,166 -> 238,738\n52,350 -> 574,872\n297,518 -> 297,590\n133,263 -> 133,219\n438,955 -> 939,955\n621,500 -> 621,948\n93,39 -> 530,476\n988,866 -> 220,98\n483,30 -> 329,184\n205,937 -> 419,723\n314,910 -> 842,910\n472,944 -> 923,944\n487,700 -> 586,601\n59,17 -> 333,17\n553,307 -> 553,746\n810,37 -> 810,167\n898,662 -> 858,662\n191,837 -> 191,157\n83,950 -> 83,910\n229,513 -> 559,843\n825,192 -> 44,973\n37,80 -> 460,503\n648,357 -> 29,357\n603,592 -> 425,770\n137,141 -> 693,141\n179,69 -> 479,69\n851,164 -> 172,164\n916,143 -> 99,960\n908,20 -> 28,900\n178,404 -> 700,404\n122,43 -> 645,43\n548,495 -> 155,888\n216,725 -> 216,583\n790,97 -> 51,836\n98,214 -> 98,200\n90,464 -> 141,464\n32,905 -> 912,25\n253,743 -> 253,115\n521,826 -> 304,826\n733,392 -> 733,485\n315,95 -> 964,744\n386,749 -> 553,916\n698,985 -> 59,346\n380,969 -> 820,969\n134,641 -> 310,641\n66,899 -> 860,105\n827,304 -> 560,37\n824,213 -> 132,905\n93,138 -> 200,245\n54,450 -> 54,436\n163,276 -> 31,408\n959,333 -> 976,333\n499,129 -> 645,129\n924,321 -> 924,332\n629,166 -> 629,901\n505,769 -> 864,410\n80,360 -> 48,360\n22,971 -> 983,10\n500,87 -> 721,87\n227,737 -> 227,540\n698,177 -> 698,713\n20,106 -> 20,204\n187,176 -> 902,891\n803,806 -> 574,806\n413,785 -> 413,858\n736,728 -> 28,728\n158,870 -> 20,870\n78,475 -> 75,472\n481,434 -> 80,434\n975,208 -> 425,208\n59,639 -> 304,639\n287,919 -> 923,283\n940,933 -> 104,97\n699,429 -> 466,429\n240,988 -> 929,299\n970,873 -> 396,873\n441,585 -> 441,697\n337,259 -> 36,259\n45,759 -> 45,382\n220,468 -> 373,315\n10,262 -> 793,262\n753,268 -> 147,874\n664,560 -> 603,560\n974,81 -> 974,26\n575,331 -> 254,331\n754,378 -> 727,378\n354,394 -> 298,450\n108,814 -> 108,804\n848,375 -> 604,375\n697,530 -> 697,288\n977,54 -> 967,44\n241,754 -> 484,754\n793,745 -> 755,745\n974,415 -> 974,98\n677,367 -> 677,731\n69,744 -> 695,118\n50,39 -> 940,929\n414,721 -> 414,917\n870,587 -> 870,396\n881,759 -> 583,759\n679,798 -> 679,226\n826,917 -> 217,917\n896,919 -> 102,919\n528,881 -> 498,881\n15,89 -> 15,212\n887,280 -> 747,280\n763,303 -> 967,507\n904,964 -> 562,964\n157,752 -> 433,752\n752,199 -> 34,917\n60,970 -> 921,109\n934,434 -> 683,183\n748,427 -> 748,601\n20,47 -> 957,984\n71,691 -> 332,691\n782,637 -> 782,137\n483,623 -> 704,623\n11,965 -> 274,965\n285,172 -> 700,172\n613,845 -> 855,845\n955,296 -> 738,296\n596,750 -> 596,974\n332,851 -> 360,851\n176,388 -> 107,388\n116,328 -> 325,119\n932,588 -> 403,588\n247,420 -> 247,69\n52,965 -> 52,740\n541,579 -> 541,48\n321,530 -> 321,115\n124,33 -> 986,895\n575,950 -> 922,603\n231,814 -> 755,814\n940,445 -> 957,462\n365,743 -> 432,810\n488,286 -> 777,286\n988,905 -> 887,905\n715,846 -> 842,846\n481,894 -> 481,954\n297,868 -> 297,441\n368,928 -> 368,348\n951,981 -> 49,79\n46,743 -> 551,743\n900,241 -> 50,241\n441,942 -> 441,762\n488,58 -> 488,482\n945,187 -> 945,639\n263,779 -> 476,779\n593,290 -> 593,985\n781,498 -> 914,498\n351,557 -> 351,324\n809,966 -> 709,966\n912,545 -> 522,155\n985,681 -> 903,599\n837,881 -> 532,881\n728,485 -> 753,460\n79,680 -> 79,448\n917,769 -> 917,456\n135,845 -> 135,777\n460,922 -> 981,401\n516,830 -> 516,403\n230,419 -> 230,267\n770,297 -> 583,297\n577,782 -> 488,693\n118,728 -> 791,55\n983,192 -> 983,340\n307,252 -> 393,338\n83,345 -> 83,628\n318,461 -> 318,670\n809,385 -> 809,383\n145,124 -> 444,124\n906,892 -> 906,990\n295,22 -> 295,617\n828,312 -> 828,227\n546,132 -> 546,100\n398,750 -> 398,237\n27,770 -> 299,770\n863,517 -> 863,869\n700,806 -> 168,806\n279,262 -> 169,152\n954,285 -> 681,12\n896,102 -> 127,871\n527,532 -> 404,532\n853,397 -> 168,397\n642,273 -> 595,273\n422,123 -> 422,805\n879,789 -> 879,177\n233,171 -> 917,855\n82,148 -> 559,148\n95,969 -> 95,65\n876,779 -> 876,257\n753,35 -> 51,737\n421,756 -> 735,756\n637,602 -> 637,886\n275,689 -> 275,360\n714,77 -> 714,353\n617,645 -> 764,645\n131,702 -> 689,702\n752,795 -> 524,567\n606,716 -> 632,716\n261,700 -> 261,104\n196,894 -> 377,713\n812,626 -> 812,76\n739,368 -> 360,747\n976,646 -> 976,981\n459,948 -> 500,948\n154,669 -> 179,644\n410,896 -> 661,645\n312,187 -> 248,123\n507,655 -> 513,655\n649,726 -> 649,447\n874,19 -> 24,19\n951,64 -> 57,958\n29,60 -> 533,60\n559,262 -> 941,644\n665,319 -> 531,185\n835,601 -> 918,601\n269,556 -> 871,556\n410,708 -> 410,163\n271,105 -> 860,105\n143,427 -> 475,95\n716,656 -> 716,270\n111,771 -> 822,60\n170,775 -> 233,775\n730,588 -> 730,106\n592,161 -> 901,470\n486,802 -> 289,802\n113,770 -> 726,157\n127,98 -> 825,796\n392,957 -> 794,957\n529,793 -> 529,117\n347,196 -> 347,310\n893,613 -> 360,80\n961,362 -> 961,399\n577,52 -> 577,566\n792,578 -> 792,622\n35,883 -> 35,395\n499,779 -> 499,752\n921,359 -> 921,90\n557,224 -> 290,224\n863,190 -> 874,190\n100,190 -> 100,519\n909,38 -> 33,914\n44,421 -> 98,421\n731,787 -> 731,462\n722,28 -> 722,685\n913,538 -> 274,538\n149,648 -> 149,186\n302,594 -> 521,594\n927,333 -> 546,714\n503,42 -> 333,42\n474,260 -> 835,621\n825,363 -> 825,188\n335,140 -> 227,32\n914,613 -> 914,15\n955,734 -> 398,734\n506,913 -> 506,232\n612,271 -> 612,881\n155,856 -> 282,856\n207,820 -> 898,129\n329,463 -> 475,463\n371,719 -> 371,737\n103,503 -> 103,722\n846,779 -> 360,293\n597,247 -> 253,247\n305,912 -> 305,960\n283,277 -> 283,358\n369,327 -> 418,327\n107,190 -> 107,269\n469,247 -> 918,247\n944,213 -> 990,213\n930,158 -> 594,158\n459,844 -> 459,519\n493,387 -> 107,387\n514,173 -> 669,328\n818,876 -> 73,131\n405,783 -> 405,54\n583,151 -> 583,654\n211,462 -> 211,938\n639,224 -> 639,728\n561,33 -> 561,719\n607,244 -> 47,244\n772,61 -> 772,795\n777,920 -> 63,206\n121,281 -> 90,281\n668,99 -> 893,99\n352,620 -> 652,620\n589,50 -> 547,50\n845,252 -> 845,974\n666,870 -> 94,870\n724,524 -> 344,904\n569,40 -> 482,40\n224,619 -> 741,619\n935,110 -> 143,902\n107,37 -> 906,836\n308,298 -> 821,298\n983,619 -> 868,734\n659,166 -> 497,328\n60,423 -> 60,507\n483,283 -> 90,283\n568,309 -> 568,873\n262,461 -> 890,461\n328,633 -> 94,867\n892,195 -> 177,910\n310,874 -> 915,269\n647,54 -> 531,54\n749,523 -> 408,864\n597,882 -> 857,882\n756,498 -> 468,498\n671,248 -> 671,510\n676,855 -> 130,309\n46,18 -> 659,18\n144,164 -> 87,221\n412,774 -> 412,930\n67,368 -> 745,368\n246,704 -> 619,331\n714,113 -> 159,113\n203,109 -> 203,641\n418,708 -> 110,708\n619,546 -> 619,531\n617,957 -> 545,957\n630,423 -> 630,909\n584,379 -> 679,474\n572,918 -> 572,16\n101,712 -> 755,58\n167,317 -> 912,317\n836,130 -> 570,130\n759,847 -> 523,847\n901,40 -> 901,479\n908,157 -> 908,558\n351,252 -> 280,181\n648,730 -> 253,730\n330,984 -> 110,984\n717,552 -> 746,581\n206,831 -> 904,133\n684,232 -> 684,20\n889,73 -> 155,73\n896,728 -> 896,589\n55,983 -> 988,50\n342,746 -> 342,617\n138,683 -> 795,26\n968,226 -> 787,226\n311,713 -> 355,713\n201,789 -> 201,401\n909,623 -> 205,623\n540,130 -> 540,722\n695,511 -> 191,511\n221,320 -> 221,68\n75,118 -> 599,642\n982,977 -> 30,25\n534,598 -> 720,784\n355,579 -> 13,921\n137,516 -> 137,665\n510,244 -> 510,392\n845,52 -> 327,570\n167,100 -> 909,100\n573,133 -> 34,672\n371,341 -> 371,823\n959,981 -> 20,42\n143,793 -> 143,134\n815,798 -> 914,897\n286,212 -> 188,114\n28,987 -> 985,30\n652,108 -> 652,540\n978,565 -> 507,94\n817,166 -> 402,166\n250,723 -> 128,845\n676,274 -> 53,897\n981,985 -> 12,16\n682,195 -> 270,195\n409,113 -> 114,113\n585,83 -> 585,514\n897,978 -> 569,650\n158,420 -> 158,709\n603,335 -> 966,698\n484,53 -> 972,541\n149,128 -> 149,329\n555,926 -> 555,393\n143,849 -> 614,378\n816,79 -> 507,79\n525,502 -> 812,502\n736,509 -> 736,579\n612,179 -> 629,179\n821,70 -> 821,566\n665,90 -> 416,90\n63,80 -> 837,854\n151,873 -> 890,134\n698,204 -> 698,973\n936,693 -> 612,369\n369,628 -> 947,50\n308,407 -> 308,590\n367,156 -> 963,752\n949,943 -> 536,530\n589,553 -> 256,886\n348,171 -> 348,759\n546,488 -> 546,585\n351,486 -> 779,58\n952,45 -> 33,964\n187,896 -> 187,100\n725,679 -> 725,486\n756,147 -> 264,639\n281,205 -> 281,764\n630,221 -> 73,221\n919,953 -> 775,953\n552,821 -> 925,821\n294,854 -> 922,226\n772,642 -> 961,831\n705,159 -> 308,556\n107,983 -> 393,697\n403,277 -> 403,802\n719,824 -> 719,187\n947,956 -> 253,956\n453,135 -> 952,135\n905,491 -> 574,160\n498,225 -> 764,491\n741,111 -> 597,111\n881,130 -> 881,668\n308,616 -> 866,616\n172,434 -> 855,434\n218,412 -> 218,861\n293,318 -> 293,770\n712,513 -> 679,513\n100,586 -> 434,920\n338,407 -> 176,407\n481,534 -> 715,768\n805,127 -> 216,127\n406,425 -> 322,425\n154,769 -> 823,100\n813,508 -> 159,508\n286,637 -> 286,24\n55,836 -> 665,836\n571,857 -> 459,969\n414,977 -> 414,604\n133,884 -> 972,45\n383,522 -> 383,141\n889,14 -> 62,841\n122,49 -> 43,49\n544,846 -> 544,76\n948,19 -> 62,905\n798,577 -> 833,542\n973,267 -> 751,45\n620,648 -> 620,419\n102,813 -> 633,813\n255,263 -> 826,263\n231,394 -> 231,811"} -->

```elixir
day_5_input =
  Utils.read_textarea("Day 5 Input")
  |> String.split("\n", trim: true)
  |> Enum.map(fn row ->
    String.split(row, "->", trim: true)
    |> Enum.flat_map(fn coord ->
      String.split(coord, ",", trim: true)
      |> Enum.map(&(String.trim(&1) |> String.to_integer()))
    end)
  end)

defmodule Day5 do
  def find_answer(grid) do
    grid
    |> Enum.filter(fn [x1, y1, x2, y2] ->
      x1 == x2 or y1 == y2
    end)
    |> Enum.reduce([], fn [x1, y1, x2, y2], acc ->
      x_range = x1..x2
      y_range = y1..y2

      coordinates =
        for x <- x_range, y <- y_range do
          [x, y]
        end

      acc ++ coordinates
    end)
    |> Enum.frequencies_by(fn [x, y] ->
      "#{x},#{y}"
    end)
    |> Enum.filter(fn {_k, v} -> v >= 2 end)
    |> Enum.count()
  end
end

Day5.find_answer(day_5_input)
```

```output
5608
```

Unfortunately, considering only horizontal and vertical lines doesn't give you the full picture; you need to also consider diagonal lines.

Because of the limits of the hydrothermal vent mapping system, the lines in your list will only ever be horizontal, vertical, or a diagonal line at exactly 45 degrees. In other words:

An entry like `1,1 -> 3,3` covers points `1,1`, `2,2`, and `3,3`.
An entry like `9,7 -> 7,9` covers points `9,7`, `8,8`, and `7,9`.
Considering all lines from the above example would now produce the following diagram:

```
1.1....11.
.111...2..
..2.1.111.
...1.2.2..
.112313211
...1.2....
..1...1...
.1.....1..
1.......1.
222111....
```

You still need to determine the number of points where at least two lines overlap. In the above example, this is still anywhere in the diagram with a 2 or larger - now a total of 12 points.

Consider all of the lines. At how many points do at least two lines overlap?

```elixir
defmodule Day5P2 do
  def find_answer(grid) do
    grid
    |> Enum.reduce([], fn [x1, y1, x2, y2], acc ->
      m = if x1 - x2 != 0, do: (y1 - y2) / (x1 - x2), else: nil
      x_range = x1..x2
      y_range = y1..y2

      coordinates =
        for x <- x_range, y <- y_range do
          cond do
            m != nil and y - y1 == m * (x - x1) -> [x, y]
            m == nil -> [x, y]
            true -> nil
          end
        end

      acc ++ Enum.filter(coordinates, &(&1 != nil))
    end)
    |> Enum.frequencies_by(fn [x, y] ->
      "#{x},#{y}"
    end)
    |> Enum.filter(fn {_k, v} -> v >= 2 end)
    |> Enum.count()
  end
end

Day5P2.find_answer(day_5_input)
```

```output
20299
```
